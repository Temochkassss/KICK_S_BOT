package ru.teomikki.dykoprod.keyboards

import org.springframework.context.annotation.Lazy
import org.springframework.stereotype.Service
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import ru.teomikki.dykoprod.database.categories.CategoriesHelper
import ru.teomikki.dykoprod.database.categories.Category
import ru.teomikki.dykoprod.database.response.ResponseHelper
import ru.teomikki.dykoprod.state.UserStateService
import kotlin.math.min

@Service
class InlineKeyboardTemplates(
    private val userStateService: UserStateService,
    @Lazy
    private val categoriesHelper: CategoriesHelper,
) {
    fun getStartIK(chatId: Long) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("\uD83D\uDCB0 –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å").apply {
                    callbackData = "/calculate_the_cost"
                }
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDC68\u200D\uD83D\uDCBC –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º").apply {
                    callbackData = "/call_the_manager"
                }
            ),
            listOf(
                InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã").apply {
                    callbackData = "/questions_answers"
                },
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDD04 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å").apply {
                    callbackData = "/start"
                },
                InlineKeyboardButton("  –û–¢–ó–´–í–´ ‚òû").apply {
                    url = "https://t.me/kicks_k/409"
                }
            )
        ).toMutableList()

        val isAdmin = userStateService.getState(chatId).isAdmin

        if (isAdmin) {
            keyboard.add(
                listOf(
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏").apply {
                        this.callbackData = "admin_panel"
                    }
                )
            )
        }
    }

    fun getCalculateIK(categories: List<Category>): InlineKeyboardMarkup {
        return InlineKeyboardMarkup().apply {
            keyboard = categories.map { category ->
                listOf(
                    InlineKeyboardButton(category.customName).apply {
                        callbackData = "calculate_${category.name}"
                    }
                )
            }.toMutableList()
            keyboard.add(
                listOf(
                    InlineKeyboardButton("‚åµ    –°–≤–µ—Ä–Ω—É—Ç—å").apply {
                        callbackData = "back_to_main_menu"
                    },
                ),
            )
        }
    }

    fun getBackOrCloseCategoryIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º").apply {
                    callbackData = "back_to_calculate_category"
                }
            ),
            listOf(
                InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å").apply {
                    this.callbackData = "close_calculate_category"
                }
            )
        )
    }

    fun getBackToCategoryIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚åµ    –í–µ—Ä–Ω—É—Ç—å—Å—è").apply {
                    callbackData = "back_to_calculate_category"
                }
            )
        )
    }

    fun getFaqIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("üì¶ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑").apply {
                    callbackData = "faq_order_guide"
                }
            ),
            listOf(
                InlineKeyboardButton("üßÆ –ü–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–∞").apply {
                    callbackData = "faq_calculation"
                }
            ),
            listOf(
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞").apply {
                    callbackData = "faq_article_search"
                }
            ),
            listOf(
                InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å—Ä–æ–∫–∏").apply {
                    callbackData = "faq_delivery"
                }
            ),
            listOf(
                InlineKeyboardButton("‚ö´üîµ –ö–Ω–æ–ø–∫–∏ POIZON").apply {
                    callbackData = "faq_poizon_buttons"
                }
            ),
            listOf(
                InlineKeyboardButton("\uD83D\uDC68\u200D\uD83D\uDCBC –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è").apply {
                    callbackData = "/call_the_manager"
                }
            ),
            listOf(
                InlineKeyboardButton("‚åµ –°–≤–µ—Ä–Ω—É—Ç—å").apply {
                    callbackData = "back_to_main_menu"
                }
            )
        )
    }

    fun getBackToFAQIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º").apply {
                    this.callbackData = "back_to_faq"
                },
            ),
            listOf(
                InlineKeyboardButton("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å").apply {
                    this.callbackData = "close_faq"
                }
            )
        )
    }

    fun getProcessingConfirmationIK(responseId: String) = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É").apply {
                    callbackData = "proc_confirm:$responseId"
                }
            )
        )
    }

    fun getProcessingConfirmationMenu(responseId: String) = InlineKeyboardMarkup().apply {

        val buttons = listOf(
            InlineKeyboardButton("‚úÖ –î–∞").apply {
                callbackData = "proc_yes:$responseId"
            },
            InlineKeyboardButton("‚ùå –ù–µ—Ç").apply {
                callbackData = "proc_no:$responseId"
            },
            InlineKeyboardButton("‚ùì–ß–µ–≥–æ").apply {
                callbackData = "proc_what:"
            }
        )

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        keyboard = listOf(buttons.shuffled())
    }

    fun getManagerConfirmationIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å").apply { callbackData = "cancel_manager_request" },
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å").apply { callbackData = "confirm_manager_request" },
            ),
        )
    }

    fun getCancelRequestIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å").apply { callbackData = "cancel_manager_request" },
            ),

        )
    }

    fun getCancelAndResponseIK() = InlineKeyboardMarkup().apply {
        keyboard = listOf(
            listOf(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å").apply { callbackData = "cancel_manager_request" },
                InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏").apply { callbackData = "my_responses" }
            )
        )
    }

    fun getAdminPanelIK() = InlineKeyboardMarkup(
        listOf(
            listOf(
                InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–∏").apply {
                    callbackData = "admin_view_responses"
                }
            ),
            listOf(
                InlineKeyboardButton("üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã").apply {
                    callbackData = "admin_menu_categories_coeff"
                },
                InlineKeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã").apply {
                    callbackData = "admin_menu_currency_rate"
                }
            ),
            listOf(
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞").apply {
                    callbackData = "admin_menu_broadcast"
                }
            ),
            listOf(
                InlineKeyboardButton("üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å").apply {
                    callbackData = "admin_menu_change_password"
                },
                InlineKeyboardButton("üë®üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫").apply {
                    url = "https://t.me/TemochkaMik"
                }
            ),
            listOf(
                InlineKeyboardButton("‚åµ    –°–≤–µ—Ä–Ω—É—Ç—å").apply {
                    callbackData = "back_to_main_menu"
                },
            ),
        )
    )

    fun getUserResponsesIK(
        responses: List<ResponseHelper.ResponsePreview>,
        currentPage: Int,
        totalPages: Int
    ): InlineKeyboardMarkup {
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É)
        responses.take(5).forEach { response ->
            keyboard.add(
                listOf(
                    InlineKeyboardButton("üìÖ ${response.dateTime}").apply {
                        callbackData = "user_response:${response.responseId}"
                    }
                )
            )
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if (totalPages > 1) {
            val paginationRow = mutableListOf<InlineKeyboardButton>()

            if (currentPage > 1) {
                paginationRow.add(
                    InlineKeyboardButton("‚óÄÔ∏è").apply {
                        callbackData = "user_responses_page:${currentPage - 1}"
                    }
                )
            }

            paginationRow.add(
                InlineKeyboardButton("${currentPage}/${totalPages}").apply {
                    callbackData = "user_responses_show_pages:$currentPage"
                }
            )

            if (currentPage < totalPages) {
                paginationRow.add(
                    InlineKeyboardButton("‚ñ∂Ô∏è").apply {
                        callbackData = "user_responses_page:${currentPage + 1}"
                    }
                )
            }

            if (paginationRow.isNotEmpty()) {
                keyboard.add(paginationRow)
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é").apply {
                    callbackData = "back_to_main_menu"
                }
            )
        )

        return InlineKeyboardMarkup(keyboard)
    }

    fun getBackToUserResponseListIK(): InlineKeyboardMarkup {
        return InlineKeyboardMarkup(
            listOf(
                listOf(
                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É").apply {
                        callbackData = "back_to_user_responses_list"
                    }
                )
            )
        )
    }

    fun getUserResponsesPageSelectionIK(currentPage: Int, totalPages: Int): InlineKeyboardMarkup {
        val buttonsPerRow = 5
        val pagesPerBlock = 25 // 5 —Ä—è–¥–æ–≤ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        val currentBlock = (currentPage - 1) / pagesPerBlock
        val startPage = currentBlock * pagesPerBlock + 1
        val endPage = min(startPage + pagesPerBlock - 1, totalPages)

        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
        val blockPages = (startPage..endPage).map { page ->
            InlineKeyboardButton(
                if (page == currentPage) "‚Ä¢ $page ‚Ä¢" else page.toString()
            ).apply {
                callbackData = "user_responses_page:$page"
            }
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        blockPages.chunked(buttonsPerRow).forEach { rowButtons ->
            keyboard.add(rowButtons)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–ª–æ–∫–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ —á–µ–º pagesPerBlock
        if (totalPages > pagesPerBlock) {
            val navigationRow = mutableListOf<InlineKeyboardButton>()

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ" (–µ—Å–ª–∏ –Ω–µ –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ)
            if (currentBlock > 0) {
                navigationRow.add(
                    InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ").apply {
                        callbackData = "user_responses_block:${currentBlock - 1}"
                    }
                )
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–µ" (–µ—Å–ª–∏ –Ω–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–ª–æ–∫–µ)
            if ((currentBlock + 1) * pagesPerBlock < totalPages) {
                navigationRow.add(
                    InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è").apply {
                        callbackData = "user_responses_block:${currentBlock + 1}"
                    }
                )
            }

            if (navigationRow.isNotEmpty()) {
                keyboard.add(navigationRow)
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É").apply {
                    callbackData = "back_to_user_responses_list"
                }
            )
        )

        return InlineKeyboardMarkup(keyboard)
    }


    fun getAdminResponsesIK(
        responses: List<ResponseHelper.ResponsePreview>,
        currentPage: Int,
        totalPages: Int
    ): InlineKeyboardMarkup {
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–∞–∂–¥–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É)
        responses.take(5).forEach { response ->
            keyboard.add(
                listOf(
                    InlineKeyboardButton("üìÖ ${response.dateTime} (ID: ${response.responseId.take(6)})").apply {
                        callbackData = "admin_response:${response.responseId}"
                    }
                )
            )
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if (totalPages > 1) {
            val paginationRow = mutableListOf<InlineKeyboardButton>()

            if (currentPage > 1) {
                paginationRow.add(
                    InlineKeyboardButton("‚óÄÔ∏è").apply {
                        callbackData = "admin_responses_page:${currentPage - 1}"
                    }
                )
            }

            paginationRow.add(
                InlineKeyboardButton("${currentPage}/${totalPages}").apply {
                    callbackData = "admin_responses_show_pages:$currentPage"
                }
            )

            if (currentPage < totalPages) {
                paginationRow.add(
                    InlineKeyboardButton("‚ñ∂Ô∏è").apply {
                        callbackData = "admin_responses_page:${currentPage + 1}"
                    }
                )
            }

            if (paginationRow.isNotEmpty()) {
                keyboard.add(paginationRow)
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        keyboard.add(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –í –∞–¥–º–∏–Ω–∫—É").apply {
                    callbackData = "admin_panel"
                }
            )
        )

        return InlineKeyboardMarkup(keyboard)
    }

    fun getAdminResponseDetailsIK(): InlineKeyboardMarkup {
        return InlineKeyboardMarkup(
            listOf(
                listOf(
                    InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É").apply {
                        callbackData = "back_to_admin_responses_list"
                    }
                )
            )
        )
    }

    fun getAdminResponsesPageSelectionIK(currentPage: Int, totalPages: Int): InlineKeyboardMarkup {
        val buttonsPerRow = 5
        val pagesPerBlock = 25 // 5 —Ä—è–¥–æ–≤ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        val currentBlock = (currentPage - 1) / pagesPerBlock
        val startPage = currentBlock * pagesPerBlock + 1
        val endPage = min(startPage + pagesPerBlock - 1, totalPages)

        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
        val blockPages = (startPage..endPage).map { page ->
            InlineKeyboardButton(
                if (page == currentPage) "‚Ä¢ $page ‚Ä¢" else page.toString()
            ).apply {
                callbackData = "admin_responses_page:$page"
            }
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        blockPages.chunked(buttonsPerRow).forEach { rowButtons ->
            keyboard.add(rowButtons)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–ª–æ–∫–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ —á–µ–º pagesPerBlock
        if (totalPages > pagesPerBlock) {
            val navigationRow = mutableListOf<InlineKeyboardButton>()

            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ" (–µ—Å–ª–∏ –Ω–µ –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ)
            if (currentBlock > 0) {
                navigationRow.add(
                    InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ").apply {
                        callbackData = "admin_responses_block:${currentBlock - 1}"
                    }
                )
            }

            // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–µ" (–µ—Å–ª–∏ –Ω–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±–ª–æ–∫–µ)
            if ((currentBlock + 1) * pagesPerBlock < totalPages) {
                navigationRow.add(
                    InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ ‚ñ∂Ô∏è").apply {
                        callbackData = "admin_responses_block:${currentBlock + 1}"
                    }
                )
            }

            if (navigationRow.isNotEmpty()) {
                keyboard.add(navigationRow)
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.add(
            listOf(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É").apply {
                    callbackData = "back_to_admin_responses_list"
                }
            )
        )

        return InlineKeyboardMarkup(keyboard)
    }



    fun getCurrencyRateIK(currentCoeff: Double, currencyCode: String = "CNY"): InlineKeyboardMarkup {
        return InlineKeyboardMarkup().apply {
            keyboard = mutableListOf(
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
                listOf(
                    InlineKeyboardButton( "‚ö°Ô∏è–¢–µ–∫—É—â–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: ${"%.2f".format(currentCoeff)} ¬•").apply {
                        callbackData = "none"
                    }
                ),

                // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∏
                listOf(
                    InlineKeyboardButton("‚ûñ 0.05").apply {
                        callbackData = "currency_rate_dec:0.05:$currencyCode"
                    },
                    InlineKeyboardButton("‚ûï 0.05").apply {
                        callbackData = "currency_rate_inc:0.05:$currencyCode"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 0.10").apply {
                        callbackData = "currency_rate_dec:0.10:$currencyCode"
                    },
                    InlineKeyboardButton("‚ûï 0.10").apply {
                        callbackData = "currency_rate_inc:0.10:$currencyCode"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 0.50").apply {
                        callbackData = "currency_rate_dec:0.50:$currencyCode"
                    },
                    InlineKeyboardButton("‚ûï 0.50").apply {
                        callbackData = "currency_rate_inc:0.50:$currencyCode"
                    }
                ),

                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                listOf(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥").apply {
                        callbackData = "admin_panel"
                    },
                    InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å").apply {
                        callbackData = "currency_rate_reset:0.00:$currencyCode"
                    },
                ),
            )
        }
    }

    fun getCategoriesForEditIK(categories: List<Category>): InlineKeyboardMarkup {
        val keyboard = mutableListOf<List<InlineKeyboardButton>>()

        categories.forEach { category ->
            val customName = category.customName
            val coefficient = category.coefficient

            keyboard.add(
                listOf(
                    InlineKeyboardButton("$customName ~ $coefficient ‚ÇΩ").apply {
                        callbackData = "edit_categories_select:${category.name}"
                    },
                )
            )
        }

        keyboard.add(
            listOf(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥").apply {
                    callbackData = "admin_panel"
                }
            )
        )

        return InlineKeyboardMarkup(keyboard)
    }

    fun getCategoryEditMenuIK(category: Category): InlineKeyboardMarkup {
        return InlineKeyboardMarkup().apply {
            keyboard = mutableListOf(
                listOf(
                    InlineKeyboardButton( "‚ö°Ô∏è–¢–µ–∫—É—â–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: ${category.coefficient} ‚ÇΩ").apply {
                        callbackData = "none"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 50 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_dec:50:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 50 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_inc:50:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 100 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_dec:100:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 100 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_inc:100:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 250 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_dec:250:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 250 ‚ÇΩ").apply {
                        callbackData = "edit_categories_coeff_inc:250:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton(if (category.promo == null || category.promo == 0) "üéÅ –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–¥–∫—É" else "‚ùå –£–±—Ä–∞—Ç—å —Å–∫–∏–¥–∫—É").apply {
                        callbackData = "edit_categories_promo_toggle:0:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥").apply {
                        callbackData = "admin_menu_categories_coeff"
                    }
                )
            )
        }
    }


    fun getPromoEditMenuIK(category: Category): InlineKeyboardMarkup {
        return InlineKeyboardMarkup().apply {
            keyboard = mutableListOf(
                listOf(
                    InlineKeyboardButton( "‚ö°Ô∏è–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: ${category.promo} %").apply {
                        callbackData = "none"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 1 %").apply {
                        callbackData = "edit_categories_promo_dec:1:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 1 %").apply {
                        callbackData = "edit_categories_promo_inc:1:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 5 %").apply {
                        callbackData = "edit_categories_promo_dec:5:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 5 %").apply {
                        callbackData = "edit_categories_promo_inc:5:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 10 %").apply {
                        callbackData = "edit_categories_promo_dec:10:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 10 %").apply {
                        callbackData = "edit_categories_promo_inc:10:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("‚ûñ 25 %").apply {
                        callbackData = "edit_categories_promo_dec:25:${category.name}"
                    },
                    InlineKeyboardButton("‚ûï 25 %").apply {
                        callbackData = "edit_categories_promo_inc:25:${category.name}"
                    }
                ),
                listOf(
                    InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å").apply {
                        callbackData = "edit_categories_promo_reset:0:${category.name}" }
                ),
                listOf(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥").apply {
                        callbackData = "edit_categories_select:${category.name}"
                    }
                )
            )
        }
    }

}